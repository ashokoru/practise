<testsuite failures="15" name="resources/TwoWAyCommands.feature" skipped="0" tests="15" time="23.027341">
  <testcase classname="resources.TwoWAyCommands" name="Update Set Point" time="5.229156">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:24.194+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Perform Pre Trip" time="1.228878">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:25.479+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Cycle Sentry Mode" time="1.292656">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:26.809+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Continuous Mode" time="1.29536">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:28.135+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Defrost" time="1.293192">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:29.449+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Clear Alarms" time="1.474252">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:30.937+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="View Optiset Profile" time="1.248672">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:32.246+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Activate Optiset Profile" time="1.273001">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:33.532+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Configure Door Alarm" time="1.226296">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:34.773+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:34.773+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureDoorAlarm/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId":"1","dwellTime":"30"}] ............................... skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Configure Temperature Range Settings" time="1.21195">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1181, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:35.992+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:34.773+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureDoorAlarm/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId":"1","dwellTime":"30"}] ............................... skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1181, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:35.992+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureTemperatureRangeSettings/' ....... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId": "1","highTemperature": "30","lowTemperature": "-30","rangeRelativeTo": "1","outOfRange": "10"}] . skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="View Door Alarm" time="1.282678">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1191, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:37.296+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:34.773+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureDoorAlarm/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId":"1","dwellTime":"30"}] ............................... skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1181, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:35.992+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureTemperatureRangeSettings/' ....... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId": "1","highTemperature": "30","lowTemperature": "-30","rangeRelativeTo": "1","outOfRange": "10"}] . skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1191, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:37.296+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewDoorAlarm/' ........................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response == [{"doorAlarmDwellingMins1": 30,"doorAlarmDwellingMins2": 0,"doorAlarmDwellingMins3": 0,"vehicleName": data[4],"customerName": data[3],"status": true}] . skipped
* def resu = call result 40000 ............................................ skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="View Temperature Range Settings" time="1.136971">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1064, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:38.468+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:34.773+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureDoorAlarm/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId":"1","dwellTime":"30"}] ............................... skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1181, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:35.992+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureTemperatureRangeSettings/' ....... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId": "1","highTemperature": "30","lowTemperature": "-30","rangeRelativeTo": "1","outOfRange": "10"}] . skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1191, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:37.296+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewDoorAlarm/' ........................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response == [{"doorAlarmDwellingMins1": 30,"doorAlarmDwellingMins2": 0,"doorAlarmDwellingMins3": 0,"vehicleName": data[4],"customerName": data[3],"status": true}] . skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1064, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:38.468+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewTemperatureRangeSettings/' ............ skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].lowTemperatureZone1 == -30 .......................... skipped
And match response[0].highTemperatureZone1 == 30 .......................... skipped
And match response[0].rangeRelativeZone1 == 1 ............................. skipped
And match response[0].outOfRangeTimeZone1 == 10 ........................... skipped
And match response[0].customerId == '0C7FFB8E-BE9D-4B51-8D61-CA10BF4503C4' . skipped
And match response[0].vehicleId == 'Test Vehicle 1' ....................... skipped
And match response[0].status == true ...................................... skipped
* def resu = call result 40000 ............................................ skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Remote Off" time="1.350564">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1324, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:39.779+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:34.773+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureDoorAlarm/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId":"1","dwellTime":"30"}] ............................... skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1181, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:35.992+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureTemperatureRangeSettings/' ....... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId": "1","highTemperature": "30","lowTemperature": "-30","rangeRelativeTo": "1","outOfRange": "10"}] . skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1191, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:37.296+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewDoorAlarm/' ........................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response == [{"doorAlarmDwellingMins1": 30,"doorAlarmDwellingMins2": 0,"doorAlarmDwellingMins3": 0,"vehicleName": data[4],"customerName": data[3],"status": true}] . skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1064, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:38.468+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewTemperatureRangeSettings/' ............ skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].lowTemperatureZone1 == -30 .......................... skipped
And match response[0].highTemperatureZone1 == 30 .......................... skipped
And match response[0].rangeRelativeZone1 == 1 ............................. skipped
And match response[0].outOfRangeTimeZone1 == 10 ........................... skipped
And match response[0].customerId == '0C7FFB8E-BE9D-4B51-8D61-CA10BF4503C4' . skipped
And match response[0].vehicleId == 'Test Vehicle 1' ....................... skipped
And match response[0].status == true ...................................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1324, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:39.779+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/remoteOff/' ............................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def resu = call result 40000 ............................................ skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Remote On" time="1.217003">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1154, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:41.045+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:34.773+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureDoorAlarm/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId":"1","dwellTime":"30"}] ............................... skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1181, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:35.992+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureTemperatureRangeSettings/' ....... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId": "1","highTemperature": "30","lowTemperature": "-30","rangeRelativeTo": "1","outOfRange": "10"}] . skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1191, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:37.296+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewDoorAlarm/' ........................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response == [{"doorAlarmDwellingMins1": 30,"doorAlarmDwellingMins2": 0,"doorAlarmDwellingMins3": 0,"vehicleName": data[4],"customerName": data[3],"status": true}] . skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1064, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:38.468+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewTemperatureRangeSettings/' ............ skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].lowTemperatureZone1 == -30 .......................... skipped
And match response[0].highTemperatureZone1 == 30 .......................... skipped
And match response[0].rangeRelativeZone1 == 1 ............................. skipped
And match response[0].outOfRangeTimeZone1 == 10 ........................... skipped
And match response[0].customerId == '0C7FFB8E-BE9D-4B51-8D61-CA10BF4503C4' . skipped
And match response[0].vehicleId == 'Test Vehicle 1' ....................... skipped
And match response[0].status == true ...................................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1324, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:39.779+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/remoteOff/' ............................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1154, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:41.045+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/remoteOn/' ................................ skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped</failure>
  </testcase>
  <testcase classname="resources.TwoWAyCommands" name="Get Temperature Data for vehicles" time="1.266714">
    <failure message="-unknown-:40 - &#10;TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1141, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {&quot;path&quot;:&quot;/connected-solutions/obtainToken/&quot;,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Valid credential must be provided&quot;,&quot;timestamp&quot;:&quot;2021-09-27T08:15:42.319+0000&quot;,&quot;status&quot;:401}">* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1953, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:24.194+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/updateSetPoint/' .......................... skipped
And param zone = '1' ...................................................... skipped
And param setpoint = '2' .................................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
And print authToken ....................................................... skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1158, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:25.479+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/performPreTrip/' .......................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1177, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:26.809+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterCycleSentryMode/' .................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1131, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:28.135+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/enterContinuousMode/' ..................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1185, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:29.449+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/defrost/' ................................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And param zone = '1' ...................................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1374, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:30.937+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/clearAlarms/' ............................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1159, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:32.246+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewOptisetProfile/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#	null' ....................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1204, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:33.532+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/activateOptisetProfile/' .................. skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And params {"profileId": "625295551","setpoint": "-23","languageId": "1"} . skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1164, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:34.773+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureDoorAlarm/' ...................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId":"1","dwellTime":"30"}] ............................... skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1181, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:35.992+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/configureTemperatureRangeSettings/' ....... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= [{"zoneId": "1","highTemperature": "30","lowTemperature": "-30","rangeRelativeTo": "1","outOfRange": "10"}] . skipped
And request body .......................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1191, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:37.296+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewDoorAlarm/' ........................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response == [{"doorAlarmDwellingMins1": 30,"doorAlarmDwellingMins2": 0,"doorAlarmDwellingMins3": 0,"vehicleName": data[4],"customerName": data[3],"status": true}] . skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1064, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:38.468+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/viewTemperatureRangeSettings/' ............ skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].lowTemperatureZone1 == -30 .......................... skipped
And match response[0].highTemperatureZone1 == 30 .......................... skipped
And match response[0].rangeRelativeZone1 == 1 ............................. skipped
And match response[0].outOfRangeTimeZone1 == 10 ........................... skipped
And match response[0].customerId == '0C7FFB8E-BE9D-4B51-8D61-CA10BF4503C4' . skipped
And match response[0].vehicleId == 'Test Vehicle 1' ....................... skipped
And match response[0].status == true ...................................... skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1324, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:39.779+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/remoteOff/' ............................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def resu = call result 40000 ............................................ skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1154, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:41.045+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
Given path 'connected-solutions/remoteOn/' ................................ skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
And request requestBody ................................................... skipped
When method post .......................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].customerId == customerId ............................ skipped
And match response[0].vehicleId == vehicleId .............................. skipped
And match response[0].requestIdentifier == '#notnull' ..................... skipped
* def requestAPIName = response[0].requestIdentifier ...................... skipped
Then print requestAPIName ................................................. skipped
* def myrequestID = call read('GetRequestStatus.feature@requestStatus') {requestAPIName : '#(requestAPIName)', authToken : '#(authToken)', customerId : '#(customerId)', vehicleId : '#(vehicleId)'} . skipped
* def propertiesData = .................................................... passed
* def data = propertiesData() ............................................. passed
* url data[0] ............................................................. passed
* configure ssl = true .................................................... passed
* configure cookies = null ................................................ passed
* def APIurl = data[0] .................................................... passed
* def userName = data[1] .................................................. passed
* def password = data[2] .................................................. passed
* def customerId = data[3] ................................................ passed
* def vehicleId = data[4] ................................................. passed
* configure headers = {X-External-ID: '#(customerId)'} .................... passed
* def requestBody = {"userName": '#(userName)',"password": '#(password)'} . passed
* params {vehicles: '#(vehicleId)'} ....................................... passed
* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} . failed

Stack Trace:
com.intuit.karate.exception.KarateException: -unknown-:40 - 
TokenTwoWay.feature:21 - status code was: 401, expected: 200, response time: 1141, url: https://rest.tracking.thermoking.com/connected-solutions/obtainToken/, response: {"path":"/connected-solutions/obtainToken/","error":"Unauthorized","message":"Valid credential must be provided","timestamp":"2021-09-27T08:15:42.319+0000","status":401}&#13;
	at ✽.* def obtainToken = callonce read('TokenTwoWay.feature') {APIurl : '#(APIurl)', userName : '#(userName)', password : '#(password)', customerId : '#(customerId)'} (-unknown-:40)&#13;

* def authToken = obtainToken.response.accessToken ........................ skipped
Then print authToken ...................................................... skipped
* def result = ............................................................ skipped
* def getDate = ........................................................... skipped
* def currentDate = getDate() ............................................. skipped
* def startTime = currentDate + ' 00:00:00' ............................... skipped
* def endTime = currentDate + ' 10:05:00' ................................. skipped
* def pathId = 'connected-solutions/getTemperatureDataForVehicles/' + startTime + '/' + endTime + '/' . skipped
Given path pathId ......................................................... skipped
And header X-OAUTH2-Token = authToken ..................................... skipped
And body= {"userName": '#(userName)',"password": '#(password)'} ........... skipped
When method get ........................................................... skipped
Then status 200 ........................................................... skipped
And print response ........................................................ skipped
And match response[0].vehicleName == '#notnull' ........................... skipped
* def resu = call result 40000 ............................................ skipped</failure>
  </testcase>
</testsuite>
